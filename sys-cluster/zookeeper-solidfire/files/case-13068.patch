diff --recursive --unified a/src/c/include/zookeeper.h b/src/c/include/zookeeper.h
--- a/src/c/include/zookeeper.h	2014-05-14 20:14:57.458413027 -0600
+++ b/src/c/include/zookeeper.h	2014-05-14 20:39:18.529376078 -0600
@@ -506,6 +506,46 @@
   log_callback_fn log_callback);
 
 /**
+ * \brief create a handle to communicate with zookeeper.
+ *
+ * This function is identical to \ref zookeeper_init2 except it allows one
+ * to specify a local IP Address to explicitly bind to for all outbound
+ * communcation.
+ *
+ * This method creates a new handle and a zookeeper session that corresponds
+ * to that handle. Session establishment is asynchronous, meaning that the
+ * session should not be considered established until (and unless) an
+ * event of state ZOO_CONNECTED_STATE is received.
+ * \param host comma separated host:port pairs, each corresponding to a zk
+ *   server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002"
+ * \param fn the global watcher callback function. When notifications are
+ *   triggered this function will be invoked.
+ * \param clientid the id of a previously established session that this
+ *   client will be reconnecting to. Pass 0 if not reconnecting to a previous
+ *   session. Clients can access the session id of an established, valid,
+ *   connection by calling \ref zoo_client_id. If the session corresponding to
+ *   the specified clientid has expired, or if the clientid is invalid for
+ *   any reason, the returned zhandle_t will be invalid -- the zhandle_t
+ *   state will indicate the reason for failure (typically
+ *   ZOO_EXPIRED_SESSION_STATE).
+ * \param context the handback object that will be associated with this instance
+ *   of zhandle_t. Application can access it (for example, in the watcher
+ *   callback) using \ref zoo_get_context. The object is not used by zookeeper
+ *   internally and can be null.
+ * \param flags reserved for future use. Should be set to zero.
+ * \param log_callback All log messages will be passed to this callback function.
+ *   For more details see \ref zoo_get_log_callback and \ref zoo_set_log_callback.
+ * \param local_ip Local IPAddress to bind to for all outgoing communication to
+ *   the server.
+ * \return a pointer to the opaque zhandle structure. If it fails to create
+ * a new zhandle the function returns NULL and the errno variable
+ * indicates the reason.
+ */
+ZOOAPI zhandle_t *zookeeper_init3(const char *host, watcher_fn fn,
+  int recv_timeout, const clientid_t *clientid, void *context, int flags,
+  log_callback_fn log_callback, const char *local_ip);
+
+/**
  * \brief update the list of servers this client will connect to.
  *
  * This method allows a client to update the connection string by providing
diff --recursive --unified a/src/c/src/zk_adaptor.h b/src/c/src/zk_adaptor.h
--- a/src/c/src/zk_adaptor.h	2013-12-05 10:36:44.000000000 -0700
+++ b/src/c/src/zk_adaptor.h	2014-05-14 20:26:01.014103243 -0600
@@ -249,6 +249,9 @@
 
     /** used for chroot path at the client side **/
     char *chroot;
+
+    // Local IP Address to bind all outgoing communication to
+    char *local_ip;
 };
 
 
diff --recursive --unified a/src/c/src/zookeeper.c b/src/c/src/zookeeper.c
--- a/src/c/src/zookeeper.c	2014-05-14 20:14:57.490413006 -0600
+++ b/src/c/src/zookeeper.c	2014-05-14 20:58:29.532068701 -0600
@@ -451,6 +451,11 @@
         zh->chroot = NULL;
     }
 
+    if (zh->local_ip != NULL) {
+        free(zh->local_ip);
+        zh->local_ip = NULL;
+    }
+
     free_auth_info(&zh->auth_h);
     destroy_zk_hashtable(zh->active_node_watchers);
     destroy_zk_hashtable(zh->active_exist_watchers);
@@ -997,7 +1002,7 @@
  */
 static zhandle_t *zookeeper_init_internal(const char *host, watcher_fn watcher,
         int recv_timeout, const clientid_t *clientid, void *context, int flags,
-        log_callback_fn log_callback)
+        log_callback_fn log_callback, const char *local_ip)
 {
     int errnosave = 0;
     zhandle_t *zh = NULL;
@@ -1020,7 +1025,7 @@
     }
 #endif
     LOG_INFO(LOGCALLBACK(zh), "Initiating client connection, host=%s sessionTimeout=%d watcher=%p"
-          " sessionId=%#llx sessionPasswd=%s context=%p flags=%d",
+          " sessionId=%#llx sessionPasswd=%s context=%p flags=%d localIP=%s",
               host,
               recv_timeout,
               watcher,
@@ -1028,7 +1033,8 @@
               ((clientid == 0) || (clientid->passwd[0] == 0) ?
                "<null>" : "<hidden>"),
               context,
-              flags);
+              flags,
+              local_ip);
 
     zh->hostname = NULL;
     zh->fd = -1;
@@ -1077,6 +1083,12 @@
     if(update_addrs(zh) != 0) {
         goto abort;
     }
+    if (local_ip) {
+        zh->local_ip = strdup(local_ip);
+        if (zh->local_ip == NULL) {
+            goto abort;
+        }
+    }
     if (clientid) {
         memcpy(&zh->client_id, clientid, sizeof(zh->client_id));
     } else {
@@ -1109,14 +1121,21 @@
 zhandle_t *zookeeper_init(const char *host, watcher_fn watcher,
         int recv_timeout, const clientid_t *clientid, void *context, int flags)
 {
-    return zookeeper_init_internal(host, watcher, recv_timeout, clientid, context, flags, NULL);
+    return zookeeper_init_internal(host, watcher, recv_timeout, clientid, context, flags, NULL, NULL);
 }
 
 zhandle_t *zookeeper_init2(const char *host, watcher_fn watcher,
         int recv_timeout, const clientid_t *clientid, void *context, int flags,
         log_callback_fn log_callback)
 {
-    return zookeeper_init_internal(host, watcher, recv_timeout, clientid, context, flags, log_callback);
+    return zookeeper_init_internal(host, watcher, recv_timeout, clientid, context, flags, log_callback, NULL);
+}
+
+zhandle_t *zookeeper_init3(const char *host, watcher_fn watcher,
+        int recv_timeout, const clientid_t *clientid, void *context, int flags,
+        log_callback_fn log_callback, const char *local_ip)
+{
+    return zookeeper_init_internal(host, watcher, recv_timeout, clientid, context, flags, log_callback, local_ip);
 }
 
 /**
@@ -2007,6 +2026,23 @@
 #else
             fcntl(zh->fd, F_SETFL, O_NONBLOCK|fcntl(zh->fd, F_GETFL, 0));
 #endif
+
+            // If requested explicitly bind outgoing socket to specified IPAddress
+            if (zh->local_ip) {
+                struct sockaddr_in laddr;
+                memset(&laddr, 0, sizeof(laddr));
+                laddr.sin_addr.s_addr = inet_addr(zh->local_ip);
+                laddr.sin_family = AF_INET;
+                // ***DO NOT SET laddr.sin_port.*** If it is set to anything when we bind(), prior to the connect,
+                // things will just not work one bit.  So don't do it. The memset() above ensures it's zero'd out.
+                rc = bind(zh->fd, (struct sockaddr *)&laddr, sizeof(laddr));
+
+                if (rc != 0) {
+                    return api_epilog(zh, handle_socket_error_msg(zh, __LINE__,
+                                                                  ZSYSTEMERROR, "bind() to local ip failed"));
+                }
+            }
+
 #if defined(AF_INET6)
             if (zh->addr_cur.ss_family == AF_INET6) {
                 rc = connect(zh->fd, (struct sockaddr*)&zh->addr_cur, sizeof(struct sockaddr_in6));
