diff --recursive --unified --new-file a/src/java/main/org/apache/zookeeper/server/DataTree.java b/src/java/main/org/apache/zookeeper/server/DataTree.java
--- a/src/java/main/org/apache/zookeeper/server/DataTree.java	2013-10-22 21:06:54.000000000 -0600
+++ b/src/java/main/org/apache/zookeeper/server/DataTree.java	2013-10-22 21:25:45.000000000 -0600
@@ -40,6 +40,7 @@
 import org.apache.zookeeper.KeeperException.NoNodeException;
 import org.apache.zookeeper.KeeperException.NodeExistsException;
 import org.apache.zookeeper.Quotas;
+import org.apache.zookeeper.Sessions;
 import org.apache.zookeeper.StatsTrack;
 import org.apache.zookeeper.WatchedEvent;
 import org.apache.zookeeper.Watcher;
@@ -62,6 +63,8 @@
 import org.apache.zookeeper.txn.SetDataTxn;
 import org.apache.zookeeper.txn.Txn;
 import org.apache.zookeeper.txn.TxnHeader;
+import org.apache.zookeeper.ZooDefs.Perms;
+import org.apache.zookeeper.ZooDefs.Ids;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -97,12 +100,22 @@
     /** this will be the string thats stored as a child of root */
     private static final String procChildZookeeper = procZookeeper.substring(1);
 
+	/**
+     * the zookeeper session node that acts as the session management node for
+     * zookeeper
+     */
+    private static final String sessionZookeeper = Sessions.sessionsZookeeper;
+
     /**
      * the zookeeper quota node that acts as the quota management node for
      * zookeeper
      */
     private static final String quotaZookeeper = Quotas.quotaZookeeper;
 
+    /** the child node of procZookeeper for holding sessions */
+    private static final String sessionChildZookeeper = sessionZookeeper
+            .substring(procZookeeper.length() + 1);
+
     /** this will be the string thats stored as a child of /zookeeper */
     private static final String quotaChildZookeeper = quotaZookeeper
             .substring(procZookeeper.length() + 1);
@@ -259,6 +272,11 @@
      */
     private final DataNode procDataNode = new DataNode(new byte[0], -1L, new StatPersisted());
 
+	/**
+     * create a /zookeeper/sessions node for recording and manipulating sessions
+     */
+    private DataNode sessionDataNode = new DataNode(new byte[0], -1L, new StatPersisted());
+
     /**
      * create a /zookeeper/quota node for maintaining quota properties for
      * zookeeper
@@ -281,6 +299,9 @@
         root.addChild(procChildZookeeper);
         nodes.put(procZookeeper, procDataNode);
 
+        procDataNode.addChild(sessionChildZookeeper);
+        nodes.put(sessionZookeeper, sessionDataNode);
+
         procDataNode.addChild(quotaChildZookeeper);
         nodes.put(quotaZookeeper, quotaDataNode);
         
@@ -799,6 +820,13 @@
             rc.err = 0;
             rc.multiResult = null;
             switch (header.getType()) {
+                case OpCode.createSession:
+                    createNode(Sessions.getSessionZKPath(header.getClientId()), 
+                            new byte[0], 
+                            Ids.OPEN_ACL_UNSAFE,
+                            0, -1,
+                            header.getZxid(), header.getTime());
+                    break;
                 case OpCode.create:
                     CreateTxn createTxn = (CreateTxn) txn;
                     rc.path = createTxn.getPath();
@@ -843,6 +871,11 @@
                             setACLTxn.getVersion());
                     break;
                 case OpCode.closeSession:
+                    try {
+                        deleteNode(Sessions.getSessionZKPath(header.getClientId()), header.getZxid());
+                    } catch(NoNodeException ex) {
+                        LOG.warn("trying to delete a non-existing session node");
+                    }
                     killSession(header.getClientId(), header.getZxid());
                     break;
                 case OpCode.error:
diff --recursive --unified --new-file a/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java b/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java
--- a/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java	2013-10-22 21:06:54.000000000 -0600
+++ b/src/java/main/org/apache/zookeeper/server/ZooKeeperServer.java	2013-10-22 21:25:45.000000000 -0600
@@ -39,6 +39,12 @@
 import org.apache.jute.BinaryOutputArchive;
 import org.apache.jute.Record;
 import org.apache.zookeeper.Environment;
+import org.apache.zookeeper.Sessions;
+import org.apache.zookeeper.KeeperException.NoNodeException;
+import org.apache.zookeeper.WatchedEvent;
+import org.apache.zookeeper.Watcher;
+import org.apache.zookeeper.ZooKeeper;
+import org.apache.zookeeper.data.Stat;
 import org.apache.zookeeper.KeeperException;
 import org.apache.zookeeper.KeeperException.Code;
 import org.apache.zookeeper.KeeperException.SessionExpiredException;
@@ -74,7 +80,7 @@
  * following chain of RequestProcessors to process requests:
  * PrepRequestProcessor -> SyncRequestProcessor -> FinalRequestProcessor
  */
-public class ZooKeeperServer implements SessionExpirer, ServerStats.Provider {
+public class ZooKeeperServer implements SessionExpirer, ServerStats.Provider, Watcher {
     protected static final Logger LOG;
 
     static {
@@ -1006,6 +1012,14 @@
             if (hdr != null && txn instanceof CreateSessionTxn) {
                 CreateSessionTxn cst = (CreateSessionTxn) txn;
                 sessionTracker.addGlobalSession(sessionId, cst.getTimeOut());
+                try {
+                    Stat stat = new Stat();
+                    String sessionZKPath = Sessions.getSessionZKPath(sessionId);
+                    getZKDatabase().getData(sessionZKPath, stat, this);
+                } catch(NoNodeException ex)
+                {
+                    LOG.warn("Attempting to set a watch on a session zknode that doesnt exist!");
+                }
             } else if (request != null && request.isLocalSession()) {
                 request.request.rewind();
                 int timeout = request.request.getInt();
@@ -1022,4 +1036,15 @@
         return rc;
     }
 
+    /** 
+	 * Callback watcher used to listen for changes to the /sessions directory
+	 */
+    public void process(WatchedEvent evt) {
+        // only close the session if it was a node changed event on the sessions node
+       if(evt.getPath().startsWith(Sessions.sessionsZookeeper) && 
+			   evt.getType() == Watcher.Event.EventType.NodeDataChanged) {
+		   long sessionId = Sessions.getSessionIdFromSessionZKPath(evt.getPath());
+		   close(sessionId);
+		}
+	}
 }
diff --recursive --unified --new-file a/src/java/main/org/apache/zookeeper/Sessions.java b/src/java/main/org/apache/zookeeper/Sessions.java
--- a/src/java/main/org/apache/zookeeper/Sessions.java	1969-12-31 17:00:00.000000000 -0700
+++ b/src/java/main/org/apache/zookeeper/Sessions.java	2013-10-22 21:25:45.000000000 -0600
@@ -0,0 +1,35 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.zookeeper;
+
+public class Sessions
+{
+    public static final String sessionsZookeeper = "/zookeeper/sessions";
+
+    public static String getSessionZKPath(long sessionID)
+    {
+        return sessionsZookeeper + "/" + String.valueOf(sessionID);
+    }
+
+    public static long getSessionIdFromSessionZKPath(String zkPath)
+    {
+        int lastSlash = zkPath.lastIndexOf('/');
+        return Long.valueOf(zkPath.substring(lastSlash + 1));
+    }
+}
