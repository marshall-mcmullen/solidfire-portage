diff --recursive --unified --new-file a/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java b/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java
--- a/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java	2013-10-22 21:06:54.000000000 -0600
+++ b/src/java/main/org/apache/zookeeper/server/persistence/FileTxnLog.java	2013-10-22 21:25:47.654574352 -0600
@@ -673,6 +673,23 @@
             }
             return true;
         }
+        
+        /**
+         * Get the current position for the next record to read within the current log file.
+         * @return Byte offset to the beginning of the next record
+         */
+        public long getPosition() {
+            return inputStream.getPosition();
+        }
+        
+        /**
+         * Get the pathname of the log file currently being read. It may be null
+         * if no records have been read yet.
+         * @return Pathname of current log file
+         */
+        public File getFile() {
+            return logFile;
+        }
 
         /**
          * reutrn the current header
@@ -693,11 +710,12 @@
         }
 
         /**
-         * close the iterator
-         * and release the resources.
+         * close the iterator and release the resources.
+         * there is nothing to do if at end of stream
          */
         public void close() throws IOException {
-            inputStream.close();
+            if (inputStream != null)
+                inputStream.close();
         }
     }
 
diff --recursive --unified --new-file a/src/java/main/org/apache/zookeeper/server/persistence/Util.java b/src/java/main/org/apache/zookeeper/server/persistence/Util.java
--- a/src/java/main/org/apache/zookeeper/server/persistence/Util.java	2013-10-22 21:06:54.000000000 -0600
+++ b/src/java/main/org/apache/zookeeper/server/persistence/Util.java	2013-10-22 21:25:47.654574352 -0600
@@ -235,9 +235,23 @@
             // empty transaction
             if (bytes.length == 0)
                 return bytes;
-            if (ia.readByte("EOF") != 'B') {
-                LOG.error("Last transaction was partial.");
-                return null;
+            
+            /*
+             * A sentinel byte of 0x42 (aka 'B') is put at the end of every archive record
+             * by writeTxnBytes. If the byte is not 0x42 then the record is corrupt. If the
+             * sentinel is zero then this is most likely the result of a partially complete
+             * file flush and we are reading a preformat byte. So we treat 0 like an end of
+             * file. If it is anything else then it must be some external corruption and we
+             * throw an error.
+             */
+            byte sentinel = ia.readByte("EOR");
+            if (sentinel != 'B') {
+                if (sentinel == 0) {
+                    LOG.error("Last transaction was partial.");
+                    return null;
+                }
+                // must be external corruption (CRCTest expects this error msg exactly)
+                throw new IOException("Corrupt Sentinel byte");
             }
             return bytes;
         }catch(EOFException e){}
@@ -275,6 +289,7 @@
     public static void writeTxnBytes(OutputArchive oa, byte[] bytes)
             throws IOException {
         oa.writeBuffer(bytes, "txnEntry");
+        // write a sentinel byte used for detecting partial records in readTxnBytes
         oa.writeByte((byte) 0x42, "EOR"); // 'B'
     }
     
diff --recursive --unified --new-file a/src/java/test/org/apache/zookeeper/server/CRCTest.java b/src/java/test/org/apache/zookeeper/server/CRCTest.java
--- a/src/java/test/org/apache/zookeeper/server/CRCTest.java	2013-10-22 21:06:54.000000000 -0600
+++ b/src/java/test/org/apache/zookeeper/server/CRCTest.java	2013-10-22 21:25:47.658574356 -0600
@@ -47,6 +47,8 @@
 import org.apache.zookeeper.ZooDefs.Ids;
 import org.apache.zookeeper.server.persistence.FileSnap;
 import org.apache.zookeeper.server.persistence.FileTxnLog;
+import org.apache.zookeeper.server.persistence.FileTxnLog.FileTxnIterator;
+import org.apache.zookeeper.server.persistence.Util;
 import org.apache.zookeeper.server.persistence.TxnLog.TxnIterator;
 import org.apache.zookeeper.test.ClientBase;
 import org.junit.Assert;
@@ -75,6 +77,34 @@
         raf.write(b);
         raf.close();
     }
+    
+    /**
+     * Corrupt a log file by writing data into it relative to the beginning of the third
+     * record. This allows precise control over placing the corruption in the tail of the 
+     * second record or the head of the third. The first record should be successfully read
+     * to ensure any error is really the result of intentional corruption.
+     * @param file The path to the log file 
+     * @param offset Byte offset from the beginning of 3rd record. -1 is 2nd record sentinel
+     * @param data Bytes of data to write to the log
+     * @throws IOException
+     */
+    private void corruptLog(File file, int offset, byte[] data) throws IOException {
+        // To find the 3rd record we start reading the log stream at the first zxid in this
+        // log. Then we just read two records and we are at the 3rd record
+        FileTxnLog flog = new FileTxnLog(file.getParentFile());
+        long zxid = Util.getZxidFromName(file.getName(), "log");
+        FileTxnIterator itr = (FileTxnIterator) flog.read(zxid);
+        itr.next(); //skip first record
+        itr.next(); //skip 2nd record
+        long position = itr.getPosition()+offset; // the byte to start corruption
+        itr.close(); // close the log stream
+
+        // corrupt the log file
+        RandomAccessFile raf  = new RandomAccessFile(file, "rw");
+        raf.seek(position);
+        raf.write(data);
+        raf.close();
+    }
 
     /** return if checksum matches for a snapshot **/
     private boolean getCheckSum(FileSnap snap, File snapFile) throws IOException {
@@ -135,34 +165,94 @@
                    ClientBase.waitForServerDown(HOSTPORT,
                            ClientBase.CONNECTION_TIMEOUT));
 
+        // Find the names of all the log files generated in reverse xid order
         File versionDir = new File(tmpDir, "version-2");
-        File[] list = versionDir.listFiles();
-        //there should be only two files
-        // one the snapshot and the other logFile
-        File snapFile = null;
-        File logFile = null;
-        for (File file: list) {
-            LOG.info("file is " + file);
-            if (file.getName().startsWith("log")) {
-                logFile = file;
-                corruptFile(logFile);
-            }
-        }
+        List<File> files = Util.sortDataDir(versionDir.listFiles(), "log", false);
+        
+        // Save the next to last four logs for four different corruption 
+        // experiments. The logs must be corrupted in decreasing zxid order
+        // because FileTxnLog starts at the log before the target zxid.
+        // Throw away log with highest zxid since it may not be full enough.
+        files.get(0).delete();
+        File eofLog = files.get(1); // this is the last log that exists now
+        LOG.info("sentinel eof log file is " + eofLog);
+        File crcLog = files.get(2);
+        LOG.info("crc log file is " + crcLog);
+        File lenLog = files.get(3);
+        LOG.info("bad length log file is " + lenLog);
+        File sntLog = files.get(4);
+        LOG.info("sentinel log file is " + sntLog);
+
+        // zero the sentinel and other data of the 2nd log record to force an eof. This
+        // should not get a crc error despite bad data since the sentinel is zero. Note
+        // that we deleted the only log that follows so this is the end of all logs
+        byte[] eofSentinel = new byte[16]; // bytes of zero
+        corruptLog(eofLog, -eofSentinel.length, eofSentinel); // zero the end of 2nd record
         FileTxnLog flog = new FileTxnLog(versionDir);
-        TxnIterator itr = flog.read(1);
-        //we will get a checksum failure
+        TxnIterator itr = flog.read(Util.getZxidFromName(eofLog.getName(), "log"));
+        Assert.assertTrue(itr.next()); //skip first good record
+        Assert.assertFalse(itr.next()); //there should be no second record
+        itr.close();
+
+        // corrupt the middle of 3rd log record to force a CRC error
+        corruptLog(crcLog, 12, "mahadev".getBytes()); // 12 bytes in to skip crc and txlen
+        flog = new FileTxnLog(versionDir);
+        itr = flog.read(Util.getZxidFromName(crcLog.getName(), "log"));
+        Assert.assertTrue(itr.next()); //skip first good record
+        Assert.assertTrue(itr.next()); //skip 2nd good record
         try {
-            while (itr.next()) {
-            }
+            itr.next(); // this should throw an I/O exception because we corrupted data
             Assert.assertTrue(false);
         } catch(IOException ie) {
+            // ensure this is the error we expected
+            Assert.assertTrue(ie.getMessage().equals("CRC check failed"));
             LOG.info("crc corruption", ie);
         }
         itr.close();
+
+        // corrupt the length of 3rd log record to force a CRC error. Set length
+        // to one billion on the presumption that is too big a record.
+        byte[] badlen = {
+                (byte) ((1000000000 >>> 24) & 0xFF),
+                (byte) ((1000000000 >>> 16) & 0xFF),
+                (byte) ((1000000000 >>>  8) & 0xFF),
+                (byte) ((1000000000 >>>  0) & 0xFF),
+        };
+        corruptLog(lenLog, 8, badlen); // 8 bytes in to skip crc
+        flog = new FileTxnLog(versionDir);
+        itr = flog.read(Util.getZxidFromName(lenLog.getName(), "log"));
+        Assert.assertTrue(itr.next()); //skip first good record
+        Assert.assertTrue(itr.next()); //skip 2nd good record
+        try {
+            itr.next(); // this should throw an I/O exception because we corrupted data
+            Assert.assertTrue(false);
+        } catch(IOException ie) {
+            // ensure this is the error we expected
+            Assert.assertTrue(ie.getMessage().equals("Unreasonable length = 1000000000"));
+            LOG.info("length corruption", ie);
+        }
+        itr.close();
+
+        // corrupt the sentinel of the 2nd log record to force an error
+        byte[] badSentinel = { 0x54 }; // the question was "what is 6 times 9"
+        corruptLog(sntLog, -1, badSentinel); // corrupt the byte before 3rd record
+        flog = new FileTxnLog(versionDir);
+        itr = flog.read(Util.getZxidFromName(sntLog.getName(), "log"));
+        Assert.assertTrue(itr.next()); //skip first good record
+        try {
+            itr.next(); // this should throw an I/O exception because we corrupted sentinel
+            Assert.assertTrue(false);
+        } catch(IOException ie) {
+            // ensure this is the error we expected
+            Assert.assertTrue(ie.getMessage().equals("Corrupt Sentinel byte"));
+            LOG.info("sentinel corruption", ie);
+        }
+        itr.close();
+
         // find the last snapshot
         FileSnap snap = new FileSnap(versionDir);
         List<File> snapFiles = snap.findNRecentSnapshots(2);
-        snapFile = snapFiles.get(0);
+        File snapFile = snapFiles.get(0);
         corruptFile(snapFile);
         boolean cfile = false;
         try {
