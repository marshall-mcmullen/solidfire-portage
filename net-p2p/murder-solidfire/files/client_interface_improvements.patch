diff --git a/dist/BitTornado/BT1/DownloaderFeedback.py b/dist/BitTornado/BT1/DownloaderFeedback.py
index 75b96c0..2ab2dd8 100644
--- a/dist/BitTornado/BT1/DownloaderFeedback.py
+++ b/dist/BitTornado/BT1/DownloaderFeedback.py
@@ -148,7 +148,8 @@ class DownloaderFeedback:
     def autodisplay(self, displayfunc, interval):
         self.displayfunc = displayfunc
         self.interval = interval
-        self._autodisplay()
+        if interval != 0:
+            self._autodisplay()
 
     def _autodisplay(self):
         self.add_task(self._autodisplay, self.interval)
diff --git a/dist/BitTornado/download_bt1.py b/dist/BitTornado/download_bt1.py
index 923cdde..d44ad30 100644
--- a/dist/BitTornado/download_bt1.py
+++ b/dist/BitTornado/download_bt1.py
@@ -95,7 +95,7 @@ defaults = [
     ('tcp_ack_fudge', 0.03,
         'how much TCP ACK download overhead to add to upload rate calculations ' +
         '(0 = disabled)'),
-    ('display_interval', .5,
+    ('display_interval', 0,
         'time between updates of displayed information'),
     ('rerequest_interval', 15,
         'time to wait between requesting more peers'),
@@ -107,9 +107,9 @@ defaults = [
         'number of peers at which to stop initiating new connections'),
     ('check_hashes', 1,
         'whether to check hashes on disk'),
-    ('max_upload_rate', 10240,
+    ('max_upload_rate', 0,
         'maximum kB/s to upload at (0 = no limit, -1 = automatic)'),
-    ('max_download_rate', 10240,
+    ('max_download_rate', 0,
         'maximum kB/s to download at (0 = no limit)'),
     ('alloc_type', 'normal',
         'allocation type (may be normal, background, pre-allocate or sparse)'),
diff --git a/dist/murder_client.py b/dist/murder_client.py
index 5ee6f42..609a3be 100644
--- a/dist/murder_client.py
+++ b/dist/murder_client.py
@@ -18,6 +18,7 @@
 # last parameter is the local ip address, normally 10.x.x.x
 
 import warnings
+import time
 warnings.filterwarnings('ignore', category=DeprecationWarning)
 
 from BitTornado import PSYCO
@@ -55,7 +56,7 @@ except:
     False = 0
 
 doneFlag = None
-isPeer = False
+isSeeder = False
 
 def ok_close_now():
   doneFlag.set()
@@ -91,34 +92,18 @@ class HeadlessDisplayer:
         self.last_update_time = -1
 
     def finished(self):
-        global doneFlag
-
         self.done = True
         self.percentDone = '100'
         self.timeEst = 'Download Succeeded!'
         self.downRate = ''
-        #self.display()
-
-        global isPeer
-
-        print "done and done"
-
-        if isPeer:
-          if os.fork():
-            os._exit(0)
-            return
+        self.display()
 
-          os.setsid()
-          if os.fork():
+        global isSeeder
+        if not isSeeder:
             os._exit(0)
             return
 
-          os.close(0)
-          os.close(1)
-          os.close(2)
 
-          t = threading.Timer(30.0, ok_close_now)
-          t.start()
 
     def failed(self):
         self.done = True
@@ -127,7 +112,7 @@ class HeadlessDisplayer:
         self.downRate = ''
         global doneFlag
         doneFlag.set()
-        #self.display()
+        self.display()
 
     def error(self, errormsg):
         #self.errors.append(errormsg)
@@ -139,12 +124,14 @@ class HeadlessDisplayer:
     def display(self, dpflag = Event(), fractionDone = None, timeEst = None,
             downRate = None, upRate = None, activity = None,
             statistics = None,  **kws):
+
         if self.last_update_time + 0.1 > clock() and fractionDone not in (0.0, 1.0) and activity is not None:
             return
         self.last_update_time = clock()
         if fractionDone is not None:
             self.percentDone = str(float(int(fractionDone * 1000)) / 10)
-        if timeEst is not None:
+        global isSeeder
+        if timeEst is not None and not isSeeder:
             self.timeEst = hours(timeEst)
         if activity is not None and not self.done:
             self.timeEst = activity
@@ -165,16 +152,18 @@ class HeadlessDisplayer:
         #print '\n\n\n\n'
         for err in self.errors:
             print 'ERROR:\n' + err + '\n'
-        #print 'saving:        ', self.file
-        #print 'percent done:  ', self.percentDone
-        #print 'time left:     ', self.timeEst
-        #print 'download to:   ', self.downloadTo
-        #print 'download rate: ', self.downRate
-        #print 'upload rate:   ', self.upRate
-        #print 'share rating:  ', self.shareRating
-        #print 'seed status:   ', self.seedStatus
-        #print 'peer status:   ', self.peerStatus
-        #stdout.flush()
+
+        print time.strftime("%c")
+        print 'saving:        ', self.file
+        print 'percent done:  ', self.percentDone
+        print 'time left:     ', self.timeEst
+        print 'download to:   ', self.downloadTo
+        print 'download rate: ', self.downRate
+        print 'upload rate:   ', self.upRate
+        print 'share rating:  ', self.shareRating
+        print 'seed status:   ', self.seedStatus
+        print 'peer status:   ', self.peerStatus
+        stdout.flush()
         dpflag.set()
 
     def chooseFile(self, default, size, saveas, dir):
@@ -273,20 +262,13 @@ def run(params):
 
 if __name__ == '__main__':
 
-  if len(argv) != 5:
-    print "Incorrect number of arguments"
-    print
-    print """Usage:
-    python murder_client.py peer/seed out.torrent OUT.OUT 127.0.0.1
-
-    The last parameter is the local ip address, normally 10.x.x.x
-    """
-    sys.exit(1)
-
-  argv = ["--responsefile", sys.argv[2],
-          "--saveas", sys.argv[3],
-          "--ip", sys.argv[4]]
+    # You can find interesting options in download_bt1.py in "defaults"
+    if not ( "--responsefile" in argv and "--saveas" in argv and "--ip" in argv):
+        print "Error: --responsefile, --saveas, and --ip are required"
+        sys.exit(1)
 
-  isPeer = sys.argv[1] == "peer"
+    if ("--seed" in argv):
+        isSeeder = True
+        argv.remove("--seed")
 
-  run(argv[1:])
+    run(argv[1:])
